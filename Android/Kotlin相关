在 Kotlin 中，`run`、`with`、`apply`、`also` 和 `let` 是标准库中的 **作用域函数**（Scope Functions）。它们的主要目的是在对象的上下文中执行代码块，但它们在行为和使用场景上有一些区别。以下是它们的详细对比：

---

### 1. **`let`**

- **用途**：通常用于对非空对象执行操作，或者将对象作为参数传递给其他函数。
    
- **返回值**：返回 lambda 表达式的结果。
    
- **上下文对象**：通过 `it` 访问。
    
- **使用场景**：对象非空时执行操作，或者链式调用。
    

kotlin


val name: String? = "Kotlin"
val length = name?.let {
    println("Name is $it")
    it.length // 返回值
}

---

### 2. **`run`**

- **用途**：在对象的上下文中执行代码块，并返回结果。
    
- **返回值**：返回 lambda 表达式的结果。
    
- **上下文对象**：通过 `this` 访问（可以省略）。
    
- **使用场景**：需要在对象上下文中执行一些操作并返回结果。
    

kotlin

复制

val result = "Kotlin".run {
    println("Length is ${this.length}")
    length // 返回值
}

---

### 3. **`with`**

- **用途**：与 `run` 类似，但不是一个扩展函数，而是将对象作为参数传递。
    
- **返回值**：返回 lambda 表达式的结果。
    
- **上下文对象**：通过 `this` 访问（可以省略）。
    
- **使用场景**：对一个对象执行多个操作，不需要链式调用。
    

kotlin

复制

val result = with("Kotlin") {
    println("Length is ${this.length}")
    length // 返回值
}

---

### 4. **`apply`**

- **用途**：用于配置对象的属性，并返回对象本身。
    
- **返回值**：返回对象本身（`this`）。
    
- **上下文对象**：通过 `this` 访问（可以省略）。
    
- **使用场景**：初始化或配置对象。
    

kotlin

复制

val person = Person().apply {
    name = "Alice"
    age = 25
}

---

### 5. **`also`**

- **用途**：对对象执行额外的操作，并返回对象本身。
    
- **返回值**：返回对象本身（`this`）。
    
- **上下文对象**：通过 `it` 访问。
    
- **使用场景**：需要在链式调用中执行一些副作用操作。
    

kotlin

复制

val list = mutableListOf(1, 2, 3).also {
    println("List before adding: $it")
    it.add(4)
}

---

### 对比总结

|函数|上下文对象|返回值|使用场景|
|---|---|---|---|
|`let`|`it`|lambda 结果|非空对象操作、链式调用|
|`run`|`this`|lambda 结果|对象上下文中执行操作并返回结果|
|`with`|`this`|lambda 结果|对一个对象执行多个操作|
|`apply`|`this`|对象本身|初始化或配置对象|
|`also`|`it`|对象本身|执行副作用操作，链式调用|

---

### 选择指南

- 如果需要对非空对象执行操作，使用 **`let`**。
    
- 如果需要在对象上下文中执行操作并返回结果，使用 **`run`**。
    
- 如果需要对一个对象执行多个操作，使用 **`with`**。
    
- 如果需要初始化或配置对象，使用 **`apply`**。
    
- 如果需要在链式调用中执行副作用操作，使用 **`also`**。
    

---

### 示例代码

kotlin

复制

data class Person(var name: String = "", var age: Int = 0)

fun main() {
    // let
    val name: String? = "Kotlin"
    name?.let {
        println("Name is $it")
    }

    // run
    val length = "Kotlin".run {
        println("Length is ${this.length}")
        length
    }

    // with
    val result = with("Kotlin") {
        println("Length is ${this.length}")
        length
    }

    // apply
    val person = Person().apply {
        name = "Alice"
        age = 25
    }

    // also
    val list = mutableListOf(1, 2, 3).also {
        println("List before adding: $it")
        it.add(4)
    }
}
